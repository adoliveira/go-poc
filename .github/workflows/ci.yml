name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Cache do Go
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Instalar Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Instalar dependências
        run: |
          cd src
          go mod tidy

      - name: Deadcode (go tool)
        run: |
          go install github.com/tsenart/deadcode@latest
          cd src
          deadcode ./... | tee deadcode.out
          if [ -s deadcode.out ]; then
            cat deadcode.out
            echo "\n[ERRO] Código morto encontrado pelo deadcode. Corrija antes de prosseguir."
            exit 1
          fi

      - name: Verificar formatação (gofmt)
        run: |
          cd src
          gofmt -l .

      - name: Lint (golint)
        run: |
          go install golang.org/x/lint/golint@latest
          cd src
          golint ./... | tee golint.out
          # Interrompe apenas se houver erros (linhas que contenham 'error' ou 'Error')
          if grep -i 'error' golint.out; then
            cat golint.out
            echo "\n[ERRO] Foram encontrados erros de lint. Corrija antes de prosseguir."
            exit 1
          fi

      - name: Verificar vulnerabilidades (govulncheck)
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          cd src
          govulncheck -json ./... > govuln.json
          # Interrompe apenas se encontrar vulnerabilidades CRITICAL ou HIGH
          if grep -E '"severity":\s*"(CRITICAL|HIGH)"' govuln.json; then
            echo "\n[ERRO] Vulnerabilidades CRITICAL/HIGH encontradas pelo govulncheck. Corrija antes de prosseguir."
            exit 1
          fi

      - name: Staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          cd src
          staticcheck ./... | tee staticcheck.out
          if [ -s staticcheck.out ]; then
            cat staticcheck.out
            echo "\n[ERRO] Problemas encontrados pelo staticcheck. Corrija antes de prosseguir."
            exit 1
          fi

      - name: Ineffassign
        run: |
          go install github.com/gordonklaus/ineffassign@latest
          cd src
          ineffassign . | tee ineffassign.out
          if [ -s ineffassign.out ]; then
            cat ineffassign.out
            echo "\n[ERRO] Problemas de atribuição ineficiente encontrados pelo ineffassign. Corrija antes de prosseguir."
            exit 1
          fi

      - name: Rodar testes
        run: |
          cd src
          go test -v ./...

      - name: Cobertura de testes
        run: |
          cd src
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out | tee coverage.txt
          # Gate: exige pelo menos 80% de cobertura
          COVERAGE=$(go tool cover -func=coverage.out | grep total: | awk '{print substr($3, 1, length($3)-1)}')
          echo "Cobertura total: $COVERAGE%"
          MIN_COVERAGE=70.0
          awk -v cov="$COVERAGE" -v min="$MIN_COVERAGE" 'BEGIN {if (cov+0 < min) {print "\n[ERRO] Cobertura de testes abaixo do mínimo exigido (" min "%). Corrija antes de prosseguir."; exit 1}}'

      - name: Debug coverage files
        run: |
          cd src
          echo "Conteúdo de coverage.out gerado na pipeline:"
          cat coverage.out

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && any(github.event.pull_request.labels.*.name, startsWith('docker-publish:'))
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Extrair versão semver da label
        id: semver
        run: |
          LABEL=$(echo "${{ toJson(github.event.pull_request.labels) }}" | grep -o 'docker-publish:[^" ]*' | head -n1)
          if [ -z "$LABEL" ]; then
            echo "[ERRO] Nenhuma label docker-publish:<versao> encontrada no PR."
            exit 1
          fi
          VERSION=$(echo $LABEL | cut -d: -f2)
          if ! [[ $VERSION =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "[ERRO] Versão semver inválida: $VERSION"
            exit 1
          fi
          # Remove o 'v' inicial, se houver
          IMAGE_VERSION=${VERSION#v}
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t jmbsolution/go-api:${{ env.IMAGE_VERSION }} .

      - name: Tag da imagem (latest)
        run: |
          docker tag jmbsolution/go-api:${{ env.IMAGE_VERSION }} jmbsolution/go-api:latest

      - name: Push da imagem para o Docker Hub
        run: |
          docker push jmbsolution/go-api:${{ env.IMAGE_VERSION }}
          docker push jmbsolution/go-api:latest
